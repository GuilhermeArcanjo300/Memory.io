<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory.io</title>

    <link rel="stylesheet" type="text/css" href="../css/layout_custom.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="../css/board.css" media="screen" />
    <!--<link rel="stylesheet" type="text/css" href="../../dist/css/layout_custom.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="../../dist/css/board.css" media="screen" />-->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.1/socket.io.js" integrity="sha512-9mpsATI0KClwt+xVZfbcf2lJ8IFBAwsubJ6mI3rtULwyM3fBmQFzj0It4tGqxLOGQwGfJdk/G+fANnxfq9/cew==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    <div id="teste"></div>

    <main>
        <header class="board_header">
            <section class="board_header-player">
                <div class="board_header-player-group align-left">
                    <labe class="board_header-text-player">Jogador 1</labe>
                    <labe class="board_header-text-name">Waiting...</labe>
                </div>
                <div class="board_header-player-group align-left">
                    <labe class="board_header-text-pontuacao">0</labe>
                </div>
            </section>
            <section class="board_header-contador" id="timer">
                0:00
            </section>
            <section class="board_header-player">
                <div class="board_header-player-group align-right">
                    <labe class="board_header-text-pontuacao">0</labe>
                </div>
                <div class="board_header-player-group align-right">
                    <labe class="board_header-text-player">Jogador 2</labe>
                    <labe class="board_header-text-name">Waiting...</labe>
                </div>
            </section>
        </header>
        <p>{{titulo}}</p>

<<<<<<< HEAD
        <div class="board">
            {{#each cards}}
                <div class="board__card" onclick="changeCard(this)" data-right="false" data-value="{{value}}">
                    <div class="board__flipper">
                        <div class="board__flipper-front" style="background-image: url(../../assets/image/cards/back.jpg);">
                        </div>
                        <div class="board__flipper-back" style="background-image: url(../../assets/image/cards/{{img}});">
                        </div>
                    </div>
                </div>
            {{/each}}
        </div>
=======
        <div class="board"></div>
>>>>>>> 2eae23c96651f73b23bad91cd12b2cd0a4f0e559
    </main>

    <script type="text/javascript">
        function createCard(cardObject) {
            console.log(cardObject);
            const cardElement = document.createElement('div');

            cardElement.setAttribute('class', 'board__card');
            cardElement.setAttribute('onclick', 'changeCard(this)');
            cardElement.setAttribute('data-right', 'false');
            cardElement.setAttribute('data-value', cardObject.value);
            cardElement.innerHTML = `
                <div class="board__flipper">
                    <div class="board__flipper-front" style="background-image: url(../../assets/image/cards/back.jpg);"></div>

                    <div class="board__flipper-back" style="background-image: url(../../assets/image/cards/01.png);">
                        ${cardObject.title}
                    </div>
                </div>
            `;

            return cardElement;
        }

        // vira carta
        function filterCards(type) {
            return Array.from(document.querySelectorAll('.board__card'))
                .filter(element => {
                    const rigth = element.getAttribute("data-right") == "true";
                    const change = element.children[0].style.transform == "rotateY(180deg)" ? true : false;
                    return !rigth && change
                })
                .map(element => {
                    if(type == 'element')
                        return element
                    else
                        return element.getAttribute("data-value")
                });
        }

        function changeCard(card) {
            const cards = filterCards('value');

            if (cards.length < 1) {
                const element = card.children[0];
                element.style.transform = "rotateY(180deg)";
                
            } else if (cards.length <= 1) {
                const element = card.children[0];
                element.style.transform = "rotateY(180deg)";

                const values = filterCards('value');
                if (values[0] == values[1]) {
                    filterCards('element').forEach(card => {
                        card.setAttribute("data-right", "true");
                    });
                }
                resetCards();
            }
        }

        function resetCards() {
            setTimeout(function () {
                const cards = Array.from(document.querySelectorAll('.board__card'))
                .filter(element => {
                    const rigth = element.getAttribute("data-right") == "true";
                    const change = element.children[0].style.transform == "rotateY(180deg)" ? true : false;
                    return !rigth && change
                })
                .map(element => {return element.children[0]});

                cards.forEach(card => {
                    card.style.transform = "rotateY(0deg)";
                })
            }, 1500);
        }



        /*
        const baseUrl = document.location.origin;
        const socket = io(baseUrl);
        const teste = document.querySelector('#teste');

        socket.on('counter', function(count){
            teste.append(`${count}`);
        });
        */

        // connecting with websocket
        const urlSearchParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlSearchParams.entries());

        const baseUrl = document.location.origin;
        const socket = io(baseUrl);

        function removePlayer() {
            socket.emit('removeLastPlayer');
            window.location.href = document.location.origin;
        }

        socket.on('setNicknamesInLabels', nicknames => {
            for (let i = 0; i < nicknames.length; i++) {
                if (i === 0)
                    document.querySelector('.board_header-player-group.align-left .board_header-text-name').innerHTML = nicknames[i];
                else
                    document.querySelector('.board_header-player-group.align-right .board_header-text-name').innerHTML = nicknames[i];
            }
        });

        socket.on('playersJoined', players => {
            if (players > 2) {
                removePlayer();
            }
            else {
                if (params?.nickname)
                    socket.emit('sendNickname', params.nickname);
                else
                    removePlayer();
            }
        });

        socket.on('checkIfPlayersReady', () => {
            let answer = false;
            
            do {
                answer = window.confirm("Você está pronto?");
            } while (!answer);

            socket.emit('playerReady');
        });

        // inserting shuffled game cards
        socket.on('boardShuffled', boardObject => {
            const boardElement = document.querySelector('.board');

            for (let cardObject of boardObject) boardElement.append(createCard(cardObject));
        });
        

        /*
        // timer
        let time = 4;
        const timer = document.getElementById('timer');
        setInterval(function () {
            if (time >= 0) {
                timer.textContent = `0:${String(time).padStart(2, '0')}`;
                time--;
            }
            else{
                time = 4;
                timer.textContent = `0:04`;
            }
        }, 1000);
        */
    </script>
</body>
</html>